---
title: "Project in Spatial Econometrics"
subtitle: "Toulouse School of Economics, Master 2 EEE"
author: "Anirudh Ravishankar"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
format:
  html:
    toc: true
    number-sections: true
    embed-resources: true
---

# Data

First I will load the relevant libraries.

```{r, results='hide', warning=FALSE, message=FALSE}
library(dplyr)
library(sf)
library(missForest)
library(corrplot)
library(ggplot2)
library(spdep)
library(spatialreg)
library(stargazer)
```

Some housekeeping.

```{r}
options(scipen = 999) # Forbid scientific notation
```

## Migration flow data

```{r}
load("mig_data.RData")
mig_data <- subset(mig_data, period == "2015-2020") # Reference period is 2015-2020
```

I use the reverse negative method for migrant flows. Unlike traditional methods, it doesn't discard negative values but interprets them as reverse migration flows. By treating negative stock differences as indicative of migration reversals, it accounts for phenomena like mortality or circular migration. This method, employed by researchers like Beine and Parsons (2015), transforms negative flows from one country to another into returns to the country of origin.

The map corresponding to this method shows significant flows around the world. The information aligns with what we can expect currently. Some salient observations -- big inflows to Europe and the USA, a concentration of movement in the northern part of South America, Inflows to the Middle East from large parts of South-East Asia, and relatively low mobility in Africa. Compared to some of the other maps (such as Pseudo-Bayes or Minimization Close) the reverse negative appears to offer a more parsimonious estimation of flows, so we can see low flow rates that are otherwise identified in much larger magnitude in other maps. Overall, the different maps paint the same picture.

## Contours data

I import the [shapefile data](https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/world-administrative-boundaries/exports/shp?lang=en&timezone=Europe%2FBerlin) and transform the coordinate reference system.

```{r}
contours <- read_sf("world-administrative-boundaries/world-administrative-boundaries.shp")
contours <- st_transform(contours, "ESRI:54030")
contours <- contours %>% rename("CountryCode" = "iso3")
```

## Explanatory variables at country level

```{r}
load("covariates.RData")
```

Missing data is imputed using random forest.

```{r}
my_covariates <- cbind(my_covariates[, 1:2], missForest(my_covariates[, 3:19])[["ximp"]])
```

## Explanatory variables at country-pair level

```{r}
load("pairs.RData")
```

# Emigration and immigration rates by country

## Flows

Using `mig_data`, the inflow and outflow by country is obtained with the reverse negative method.

```{r}
inflow <- aggregate(mig_data$reverse_neg, by = list(mig_data$dest), FUN = sum)
inflow <- inflow %>% rename("CountryCode" = "Group.1", "inflow" = "x")
outflow <- aggregate(mig_data$reverse_neg, by = list(mig_data$origin), FUN = sum)
outflow <- outflow %>% rename("CountryCode" = "Group.1", "outflow" = "x")
```

They are merged to `my_covariates` and `contours`.

```{r, results='hide', warning=FALSE, message=FALSE}
my_covariates <- left_join(inflow, my_covariates)
my_covariates <- left_join(outflow, my_covariates)
contours <- left_join(my_covariates, contours)
```

There is no covariate data on ESH, GLP, GUF, MTQ, MYT, and REU. Also, no shape data for CHI and CUW. So they will all have to be removed.

```{r}
contours <- subset(contours, !(CountryCode %in% c("ESH", "GLP", "GUF", "MTQ", "MYT", "REU", "CHI", "CUW")))
```

Finally, remove duplicate rows for PRT and PSE.

```{r}
contours <- contours[!duplicated(contours$CountryCode), ]
```

We end up with the correct number of rows, 192.

```{r, echo=T}
n_distinct(contours$CountryCode)
```

Then I create variables `emigrates`, `immigrates`, and `net`.

```{r}
contours <- contours %>% 
  mutate(emigrates = outflow / population,
         immigrates = inflow / population,
         net = immigrates - emigrates,
         .after = inflow)
```

We obtain the correlation plot between the dependent and explanatory variables. It is observed that the correlations are intuitive, with immigration being positively correlated with GDP per capita, financial development, political stability, etc. Inflation and conflict are positively correlated with emigration. Interestingly, precipitation is negatively correlated with both immigration and emigration, suggesting that there is little or no movement in and out of rainy countries. This can be rationalized by the notion that the most rainy places on earth probably have low population densities in the first place. Furthermore, there is a slightly positive correlation between `emigrates` and `immigrates`, suggesting that countries with more of either are likely to have more movement in general.

```{r, warning=FALSE}
vars <- c("deflactor", "lifeexp", "dummyEarthquake", "dummyFlood", "dummyStorm", "GDPpercapita_UN", "FD", "population", "politicalstability", "landlocked", "conflictpercapita", "vulnerability", "prec_3days", "heat_wave", "dry_wave", "emigrates", "immigrates")
x <- cor(select(contours, vars))
corrplot(subset(x, select = c(emigrates, immigrates)), is.corr = F, cl.pos = "r", cl.ratio = 1, cl.align.text = "l")
```

Let us plot `emigrates`.

```{r}
contours <- st_as_sf(contours)
ggplot(contours) +
  geom_sf(aes(fill = emigrates)) +
  scale_fill_continuous("", breaks = seq(0, 0.15330616, by = 0.02), low = "white", high = "red") +
  ggtitle("Outflows Rate (emigrates)")
```

Now the plot of `immigrates`.

```{r}
ggplot(contours) +
  geom_sf(aes(fill = immigrates)) +
  scale_fill_continuous("", breaks = seq(0, 0.21328477, by = 0.03), low = "white", high = "blue") +
  ggtitle("Inflows Rate (immigrates)")
```

Finally, plot `net`.

```{r}
ggplot(contours) +
  geom_sf(aes(fill = net)) +
  scale_fill_gradient2("", low = "red", mid = "white", high = "blue") +
  ggtitle("Net Migration Rate (net = immigrates - emigrates)")
```

Let's define a spatial weight matrix based on 4 nearest neighbors.

```{r}
contours_geo <- st_geometry(contours)
contours_cen <- st_coordinates(st_centroid(contours_geo))
contours_4nnb <- knn2nb(knearneigh(contours_cen, 4))
plot(contours_geo)
plot(contours_4nnb, contours_cen, add = T)
```

Moran scatter plot for `emigrates` is obtained. The countries with important spatial autocorrelation in HH cluster are Venezuela, Western Samoa, Moldova, among others. The Moran I test indicates significant positive spatial autocorrelation.

```{r}
emigrates <- contours$emigrates
emigrates <- emigrates - mean(emigrates)
W_contours <- nb2listw(contours_4nnb)
moran.plot(emigrates, W_contours, labels = contours$CountryName)

# Moran test
moran.test(emigrates, W_contours)
```

Then the Moran scatter plot for `immigrates`. Here also the Moran I test indicates significant positive spatial autocorrelation.

```{r}
immigrates <- contours$immigrates
immigrates <- immigrates - mean(immigrates)
moran.plot(immigrates, W_contours, labels = contours$CountryName)

# Moran test
moran.test(immigrates, W_contours)
```

## OLM

Now I fit the OLM on `emigrates` and `immigrates`. For `emigrates`, it is observed that the highly significant explanatory variables are inflation, per capita conflicts, precipitation and dry wave. All the effect sizes are small apart from conflicts, which is large in magnitude. A unit increase in conflicts per capita appears to drive `emigrates` by a magnitude of more than 40 units.

```{r, results = "asis", warning=FALSE}
# Define formulas
explanatory_vars <- c("deflactor", "lifeexp", "dummyEarthquake", "dummyStorm", "GDPpercapita_UN", "FD", "conflictpercapita", "politicalstability", "landlocked", "vulnerability", "prec_3days", "heat_wave", "dry_wave")
emigrates_formula <- as.formula(paste("emigrates ~", paste(explanatory_vars, collapse = " + ")))
immigrates_formula <- as.formula(paste("immigrates ~", paste(explanatory_vars, collapse = " + ")))

# Ordinary Linear Model
olm1 <- lm(emigrates_formula, data = contours)
olm2 <- lm(immigrates_formula, data = contours)

# Tabulate results
stargazer(olm1, olm2, type = "html", single.row = T, title = "OLM Estimates.")
```

Let us now check spatial autocorrelation in the residuals of the OLM models. Here I tweaked Luke's `moran_scatter_plot()` so it constructs my 4NN matrix instead of the plain contiguity matrix. In comparison to a chloropleth map showing the different clusters, this kind of bubble map gives more information about very small countries that would otherwise be unidentifiable using the former. It can be observed from the maps that island nations are also sometimes significant drivers of the autocorrelation.

From the Moran test, there is significant autocorrelation in both models' residuals. Hence, the OLM is not adapted to the data.

```{r, warning=FALSE}
# Modified moran_scatter_plot() from my GitHub
source("https://gist.githubusercontent.com/onirudh3/3f798e3bae4eee3317647763fd44a09d/raw")

# Moran scatter plot of emigrates OLM residuals
moran_scatter_plot(residuals(olm1), contours$geometry, only_map = F, only_scatter = T, X_name = "Emigrates OLM Residuals")

# Plotting the locations of the most important values
moran_scatter_plot(residuals(olm1), contours$geometry, only_map = T, only_scatter = F)
# olm1res <- moran.plot(residuals(olm1), W_contours, labels = contours$CountryName) # To identify country names
# Moran test p-value
moran.test(residuals(olm1), W_contours)$p.value
```

Then for `olm2`.

```{r}
# Moran scatter plot of immigrates OLM residuals
moran_scatter_plot(residuals(olm2), contours$geometry, only_map = F, only_scatter = T, X_name = "Immigrates OLM Residuals")

# Plotting the locations of the most important values
moran_scatter_plot(residuals(olm2), contours$geometry, only_map = T, only_scatter = F)
# olm2res <- moran.plot(residuals(olm2), W_contours, labels = contours$CountryName) # To identify country names
# Moran test p-value
moran.test(residuals(olm2), W_contours)$p.value
```

## Model specification

First let's check SLX. From the p-values of Moran test on the residuals of both `emigrates` and `immigrates`, it is clear that including spatial dependence in the explanatory variables is not enough.

```{r}
# Moran test on SLX for emigrates
slx1 <- lmSLX(formula = emigrates_formula, data = contours, listw = W_contours)
lm.morantest(slx1, W_contours)$p.value
# Moran test on SLX for immigrates
slx2 <- lmSLX(formula = immigrates_formula, data = contours, listw = W_contours)
lm.morantest(slx2, W_contours)$p.value
```

Subsequently, I implement the testing strategy from the course to select a spatial model.

### Emigrates

```{r}
# Testing strategy for emigrates
summary(lm.LMtests(olm1, W_contours, test = "all"))
```

Both LMerr and RLMerr are less significant than their LAG counterparts. Therefore clearly, the LAG model is appropriate. To be more comprehensive, we can check with the AIC information criterion which also indicates LAG is the best choice.

```{r}
# SEM model
sem1 <- errorsarlm(emigrates_formula, data = contours, listw = W_contours, tol.solve = 10 ^ (-26))

# LAG model
lagm1 <- lagsarlm(emigrates_formula, data = contours, listw = W_contours, tol.solve = 10 ^ (-26))

# SDM model
durb1 <- lagsarlm(emigrates_formula, data = contours, listw = W_contours, Durbin = T, tol.solve = 10 ^ (-26))
```

```{r}
# Checking with AIC
c(olm = AIC(olm1), slx = AIC(slx1), lag = AIC(lagm1), sem = AIC(sem1), sdm = AIC(durb1))
```

The results of the LAG model are compared to those of the OLM below.

```{r, results = "asis"}
stargazer(olm1, lagm1, type = "html", single.row = T, title = "Emigrates OLM vs. LAG.")
```

And the impacts of the LAG model.

```{r}
impacts(lagm1, listw = W_contours)
```

### Immigrates

```{r}
# Testing strategy for immigrates
summary(lm.LMtests(olm2, W_contours, test = "all"))
```

LMerr and LMlag are both significant, But RLMlag is significant while RLMerr is not. Therefore, LAG is the appropriate choice for `immigrates` also. But from the AIC, we can see that LAG, SEM, and SDM perform similarly.

```{r}
# SEM model
sem2 <- errorsarlm(immigrates_formula, data = contours, listw = W_contours, tol.solve = 10 ^ (-26))

# LAG model
lagm2 <- lagsarlm(immigrates_formula, data = contours, listw = W_contours, tol.solve = 10 ^ (-26))

# SDM model
durb2 <- lagsarlm(immigrates_formula, data = contours, listw = W_contours, Durbin = T, tol.solve = 10 ^ (-26))
```

```{r}
# Checking with AIC
c(olm = AIC(olm2), slx = AIC(slx2), lag = AIC(lagm2), sem = AIC(sem2), sdm = AIC(durb2))
```

The results of the OLM are compared to those of the LAG, SEM, and SDM below. Aside from conflicts per capita, the estimates of the LAG and SDM are comparable. Only one lagged variable, deflactor, is significant for SDM. This makes intuitive sense, that people's migration preferences change with a delay in the knowledge of inflation. Highest frequency of inflation data may be monthly, and thus some persistence in inflation trends at this frequency may drive subsequent migration. Also, we see that SDM maximizes the Log Likelihood among the models.

```{r, results = "asis"}
stargazer(olm2, lagm2, sem2, durb2, type = "html", single.row = T, title = "Immigrates (1) OLM, (2) LAG, (3) SEM, (4) SDM.")
```

We can see the impacts of the SDM.

```{r}
impacts(durb2, listw = W_contours)
```

## Analysis using data in period 1990-1995

First, I recycle the same code from earlier to obtain the flows for the period 1990-1995.

```{r, results='hide', warning=FALSE, message=FALSE}
# Load data
load("mig_data.RData")
mig_data <- subset(mig_data, period == "1990-1995")
contours <- st_transform(read_sf("world-administrative-boundaries/world-administrative-boundaries.shp"), "ESRI:54030")
contours <- contours %>% rename("CountryCode" = "iso3")

# Flows
inflow <- aggregate(mig_data$reverse_neg, by = list(mig_data$dest), FUN = sum)
inflow <- inflow %>% rename("CountryCode" = "Group.1", "inflow" = "x")
outflow <- aggregate(mig_data$reverse_neg, by = list(mig_data$origin), FUN = sum)
outflow <- outflow %>% rename("CountryCode" = "Group.1", "outflow" = "x")

# Merge
my_covariates <- subset(my_covariates, select = -c(inflow, outflow))
my_covariates <- left_join(inflow, my_covariates)
my_covariates <- left_join(outflow, my_covariates)
contours <- left_join(my_covariates, contours)

# Final steps
contours <- subset(contours, !(CountryCode %in% c("ESH", "GLP", "GUF", "MTQ", "MYT", "REU", "CHI", "CUW")))
contours <- contours[!duplicated(contours$CountryCode), ]
contours <- contours %>% 
  mutate(emigrates = outflow / population,
         immigrates = inflow / population)
```

### Emigrates

```{r}
# Testing strategy
summary(lm.LMtests(lm(emigrates_formula, data = contours), W_contours, test = "all"))
```

So the LAG model is more appropriate.

```{r, results = "asis"}
# LAG model
lagm <- lagsarlm(emigrates_formula, data = contours, listw = W_contours, tol.solve = 10 ^ (-26))

# Table
stargazer(lagm, type = "html", single.row = T, title = "Emigrates LAG model for period 1990-1995")

# Impacts
impacts(lagm, listw = W_contours)
```

For the 2015-2020 period, the LAG model impacts were very similar for the climatic variables. But it is important to note that the covariates were the same in the estimation using either period, which is not the correct way to do econometrics. Since I do not know if the values of the covariates are an average of the respective variables over the entire period of the migration data, we would ideally like to have period specific values for an accurate estimation.

### Immigrates

```{r}
# Testing strategy
summary(lm.LMtests(lm(immigrates_formula, data = contours), W_contours, test = "all"))
```

So the LAG is more appropriate here, but recall that SDM and LAG provided similar results for the period 2015-2020.

```{r, results = "asis"}
# LAG model
lagm <- lagsarlm(immigrates_formula, data = contours, listw = W_contours, tol.solve = 10 ^ (-26))

# Table
stargazer(lagm, type = "html", single.row = T, title = "Immigrates LAG model for period 1990-1995")

# Impacts
impacts(lagm, listw = W_contours)
```

Compared to the impacts for the period 2015-2020, here we see that vulnerability has a positive effect on immigration. The sign is also opposite for dry wave, but the magnitudes are very small for it as well as for precipitation and heat wave.

# Bilateral migration flows

I obtain the combinations of different countries present in `contours`.

```{r}
df <- subset(contours, select = c(CountryCode, deflactor, lifeexp, GDPpercapita_UN, population, FD, politicalstability, landlocked, dummyEarthquake, dummyStorm, dummyFlood, Events, Fatalities, conflictpercapita, vulnerability, prec_3days, heat_wave, dry_wave, geometry))

combinations <- expand.grid(origin = df$CountryCode, dest = df$CountryCode)

combinations <- subset(combinations, origin != dest)

combinations <- merge(combinations, df, by.x = "origin", by.y = "CountryCode", all.x = T)
colnames(combinations)[3:20] <- paste("O_", colnames(combinations[, c(3:20)]), sep = "")

combinations <- merge(combinations, df, by.x = "dest", by.y = "CountryCode", all.x = T)
colnames(combinations)[21:38] <- paste("D_", colnames(combinations[, c(21:38)]), sep = "")
```

Calculating the distance between the origin and destination.

```{r}
balls <- combinations %>%
  mutate(distance = st_distance(st_centroid(O_geometry), st_centroid(D_geometry)))
```
